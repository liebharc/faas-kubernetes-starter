apiVersion: v1
kind: Secret
metadata:
  name: "authsecrets"
  namespace: {{ .Release.Namespace }}
type: Opaque
data:
  # retrieve the secret data using lookup function and when not exists, return an empty dictionary / map as result
  {{- $secretObj := (lookup "v1" "Secret" .Release.Namespace "authsecrets") | default dict }}
  {{- $secretData := (get $secretObj "data") | default dict }}
  # set secrets to existing secret data or generate a random one when none exists
  {{- $adminPw := (get $secretData "KEYCLOAK_PASSWORD") | default (randAlphaNum 20 | b64enc ) }}
  DB_USER:  {{ .Values.db.user | b64enc }}
  DB_PASSWORD: {{ .Values.db.password | b64enc }}
  DB_ADDR: {{ .Values.db.host | b64enc }}
  DB_VENDOR: {{ "postgres" | b64enc }}
  DB_PORT: {{ "5432" | b64enc }}
  DB_DATABASE: {{ .Values.db.database | b64enc }}
  KEYCLOAK_USER: {{ "cockatoo" | b64enc }}
  KEYCLOAK_PASSWORD: {{ $adminPw | quote }}